/**
* Utility Methods
*/
var Favorites = Favorites || {};

Favorites.Utilities = function()
{
	var plugin = this;
	var $ = jQuery;

	/*
	* Check if an item is favorited
	* @param int post_id
	* @param object favorites for a specific site
	*/
	plugin.isFavorite = function(post_id, site_favorites)
	{
		var status = false;
		$.each(site_favorites, function(i, v){
			if ( v.post_id === parseInt(post_id) ) status = true;
			if ( parseInt(v.post_id) === post_id ) status = true;
		});
		return status;
	}

	/**
	* Get the length of an
	*/
	plugin.objectLength = function(object)
	{
		var size = 0, key;
		for (key in object) {
			if (object.hasOwnProperty(key)) size++;
		}
		return size;
	}
}
/**
* Formatting functionality
*/
var Favorites = Favorites || {};

Favorites.Formatter = function()
{
	var plugin = this;
	var $ = jQuery;

	/*
	*  Add Favorite Count to a button
	*/
	plugin.addFavoriteCount = function(html, count)
	{
		if ( Favorites.jsData.include_count !== '1' ) return html;
		html += ' <span class="simplefavorite-button-count">' + count + '</span>';
	}
}
/**
* Generates a new nonce on page load via AJAX
* Solves problem of cached pages and expired nonces
*
* Events:
* favorites-nonce-generated: The nonce has been generated
*/
var Favorites = Favorites || {};

Favorites.NonceGenerator = function()
{
	var plugin = this;
	var $ = jQuery;

	plugin.bindEvents = function()
	{
		$(document).ready(function(){
			plugin.getNonce();
		});
	}

	/**
	* Make the AJAX call to get the nonce
	*/
	plugin.getNonce = function()
	{
		$.ajax({
			url: Favorites.jsData.ajaxurl,
			type: 'post',
			datatype: 'json',
			data: {
				action : Favorites.formActions.nonce
			},
			success: function(data){
				Favorites.jsData.nonce = data.nonce;
				$(document).trigger('favorites-nonce-generated');
			}
		});
	}

	return plugin.bindEvents();
}
var Favorites = Favorites || {};

/**
* Favorites Plugin
*/
Favorites.FrontEnd = function()
{
	var plugin = this;
	var $ = jQuery;

	plugin.utilities = new Favorites.Utilities;
	plugin.formatter = new Favorites.Formatter;

	plugin.bindEvents = function()
	{
		$(document).on('favorites-nonce-generated', function(){
			plugin.setUserFavorites(plugin.updateAllButtons);
		});
		$(document).on('favorites-cleared', function(){
			plugin.resetCounts();
		});
		$(document).on('favorites-updated-single', function(){
			plugin.updateAllLists();
			plugin.updateAllButtons();
			plugin.updateClearButtons();
			plugin.updateTotalFavorites();
		});		
	}

	// Set the initial user favorites (called on page load)
	plugin.setUserFavorites = function(callback){
		$.ajax({
			url: Favorites.jsData.ajaxurl,
			type: 'post',
			datatype: 'json',
			data: {
				action : Favorites.formActions.favoritesarray
			},
			success: function(data){
				Favorites.userFavorites = data.favorites;
				plugin.updateAllLists();
				plugin.updateAllButtons();
				plugin.updateClearButtons();
				plugin.updateTotalFavorites();
				if ( callback ) callback();
				favorites_after_initial_load(Favorites.userFavorites);
			}
		});
	}


	// Update all favorites buttons to match the user favorites
	plugin.updateAllButtons = function(callback){
		for ( var i = 0; i < $(Favorites.selectors.button).length; i++ ){
			var button = $(Favorites.selectors.button)[i];
			var postid = $(button).attr('data-postid');
			var siteid = $(button).attr('data-siteid');
			var favorite_count = $(button).attr('data-favoritecount');
			var html = "";
			var site_index = plugin.siteIndex(siteid);
			var site_favorites = Favorites.userFavorites[site_index].posts;

			if ( plugin.utilities.isFavorite( postid, site_favorites ) ){
				favorite_count = Favorites.userFavorites[site_index].posts[postid].total;
				html = plugin.formatter.addFavoriteCount(Favorites.jsData.favorited, favorite_count);
				$(button).addClass('active').html(html).removeClass('loading');
				continue;
			}

			html = plugin.formatter.addFavoriteCount(Favorites.jsData.favorite, favorite_count);
			$(button).removeClass('active').html(html).removeClass('loading');
		}

		if ( callback ) callback();
	}


	// Get Site Favorites index from All Favorites
	plugin.siteIndex = function(siteid){
		for ( var i = 0; i < Favorites.userFavorites.length; i++ ){
			if ( Favorites.userFavorites[i].site_id !== parseInt(siteid) ) continue;
			return i;
		}
	}


	// Update disabled status for clear buttons
	plugin.updateClearButtons = function(){
		for ( var i = 0; i < $(Favorites.selectors.clear_button).length; i++ ){
			var button = $(Favorites.selectors.clear_button)[i];
			var siteid = $(button).attr('data-siteid');
			for ( var c = 0; c < Favorites.userFavorites.length; c++ ){
				if ( Favorites.userFavorites[c].site_id !== parseInt(siteid) ) continue;
				if ( plugin.utilities.objectLength(Favorites.userFavorites[c].posts) > 0 ) {
					$(button).attr('disabled', false);
					continue;
				}
				$(button).attr('disabled', 'disabled');
			}
		}
	}


	// Update favorite counts after a clear
	plugin.resetCounts = function(){
		var buttons = $('.simplefavorite-button.active.has-count');

		for ( var i = 0; i < buttons.length; i++ ){
			var button = $(buttons)[i];
			var count_display = $(button).find('.simplefavorite-button-count');
			var new_count = $(count_display).text() - 1;
			$(button).attr('data-favoritecount', new_count);
		}

		plugin.setUserFavorites(plugin.updateAllButtons);
	}


	// Update all lists
	plugin.updateAllLists = function(){
		for ( var i = 0; i < Favorites.userFavorites.length; i++ ){
			var lists = $(Favorites.selectors.list + '[data-siteid="' + Favorites.userFavorites[i].site_id + '"]');
			for ( var c = 0; c < $(lists).length; c++ ){
				if ( $(lists[c]).attr('data-userid') === "" ){
					var list = $(lists)[c];
					plugin.updateSingleList($(list), Favorites.userFavorites[i].posts);
				} else {
					plugin.updateUserList(lists[c]);
				}
			}
		}
	}


	// Update a single list html
	plugin.updateSingleList = function(list, favorites){

		plugin.removeInvalidListItems(list, favorites);

		var include_buttons = ( $(list).attr('data-includebuttons') === 'true' ) ? true : false;
		var include_links = ( $(list).attr('data-includelinks') === 'true' ) ? true : false;

		// Remove list items without a data-postid attribute (backwards compatibility plugin v < 1.2)
		var list_items = $(list).find('li');
		$.each(list_items, function(i, v){
			var attr = $(this).attr('data-postid');
			if (typeof attr === typeof undefined || attr === false) {
				$(this).remove();	
			}
		});

		// Update the no favorites item
		if ( plugin.utilities.objectLength(favorites) > 0 ){
			$(list).find('[data-nofavorites]').remove();
		} else {
			html = '<li data-nofavorites>' + $(list).attr('data-nofavoritestext') + '</li>';
			$(list).empty().append(html);
		}

		var post_types = $(list).attr('data-posttype');
		post_types = post_types.split(',');
		
		// Add favorites that arent in the list
		$.each(favorites, function(i, v){
			if ( post_types.length > 0 && $.inArray(v.post_type, post_types) === -1 ) return;
			if ( $(list).find('li[data-postid=' + v.post_id + ']').length > 0 ) return;
			html = '<li data-postid="' + v.post_id + '">';
			if ( include_buttons ) html += '<p>';
			if ( include_links ) html += '<a href="' + v.permalink + '">';
			html += v.title;
			if ( include_links ) html += '</a>';
			if ( include_buttons ) html += '</p><p>' + v.button + '</p>';
			html += '</li>';
			$(list).append(html);
		});
	}


	// Update a specific user list
	plugin.updateUserList = function(list)
	{
		var user_id = $(list).attr('data-userid');
		var site_id = $(list).attr('data-siteid');
		var include_links = $(list).attr('data-includelinks');
		var include_buttons = $(list).attr('data-includebuttons');
		var post_type = $(list).attr('data-posttype');
		console.log(post_type);

		$.ajax({
			url: plugin.ajaxurl,
			type: 'post',
			datatype: 'json',
			data: {
				action : Favorites.formActions.favoritelist,
				nonce : Favorites.jsData.nonce,
				userid : user_id,
				siteid : site_id,
				includelinks : include_links,
				includebuttons : include_buttons,
				posttype : post_type
			},
			success : function(data){
				$(list).replaceWith(data.list);
			}
		});
	}


	// Remove invalid list items
	plugin.removeInvalidListItems = function(list, favorites){
		var listitems = $(list).find('li[data-postid]');
		$.each(listitems, function(i, v){
			var postid = $(this).attr('data-postid');
			if ( !plugin.utilities.isFavorite(postid, favorites) ) $(this).remove();
		});
	}


	// Update Total Number of Favorites
	plugin.updateTotalFavorites = function()
	{
		// Loop through all the total favorite element
		for ( var i = 0; i < $(Favorites.selectors.total_favorites).length; i++ ){
			var item = $(Favorites.selectors.total_favorites)[i];
			var siteid = parseInt($(item).attr('data-siteid'));
			var posttypes = $(item).attr('data-posttypes');
			var posttypes_array = posttypes.split(','); // Multiple Post Type Support
			var count = 0;

			// Loop through all sites in favorites
			for ( var c = 0; c < Favorites.userFavorites.length; c++ ){
				var site_favorites = Favorites.userFavorites[c];
				if ( site_favorites.site_id !== siteid ) continue; 
				$.each(site_favorites.posts, function(){
					if ( $(item).attr('data-posttypes') === 'all' ){
						count++;
						return;
					}
					if ( $.inArray(this.post_type, posttypes_array) !== -1 ) count++;
				});
			}

			$(item).text(count);
		}
	}

	return plugin.bindEvents();
}
/**
* Clears all favorites for the user
*
* Events:
* favorites-cleared: The user's favorites have been cleared. Params: clear button
*/
var Favorites = Favorites || {};

Favorites.Clear = function()
{
	var plugin = this;
	var $ = jQuery;

	plugin.activeButton; // The active "clear favorites" button

	plugin.bindEvents = function()
	{
		$(document).on('click', Favorites.selectors.clear_button, function(e)
		{
			e.preventDefault();
			plugin.activeButton = $(this);
			plugin.clearFavorites();
		});
	}

	/*
	* Submit an AJAX request to clear all of the user's favorites
	*/
	plugin.clearFavorites = function(button)
	{
		plugin.loading(true);
		var site_id = $(plugin.activeButton).attr('data-siteid');
		$.ajax({
			url: Favorites.jsData.ajaxurl,
			type: 'post',
			datatype: 'json',
			data: {
				action : Favorites.formActions.clearall,
				nonce : Favorites.jsData.nonce,
				siteid : site_id,
			},
			success : function(data){
				Favorites.userFavorites = data.favorites;
				plugin.loading(false);
				$(document).trigger('favorites-cleared', [plugin.activeButton]);
			}
		});
	}

	/**
	* Toggle the button loading state
	*/
	plugin.loading = function(loading)
	{
		if ( loading ){
			$(plugin.activeButton).addClass(Favorites.cssClasses.loading);
			$(plugin.activeButton).attr('disabled', 'disabled');
			return;
		}
		$(plugin.activeButton).removeClass(Favorites.cssClasses.loading);
		$(plugin.activeButton).attr('disabled', false);
	}

	return plugin.bindEvents();
}
/**
* Favorites List functionality
*/
var Favorites = Favorites || {};

Favorites.Lists = function()
{
	var plugin = this;
	var $ = jQuery;

	plugin.bindEvents = function()
	{

	}

	return plugin.bindEvents();
}
/**
* Favorite Button Submission
* Favorites/Unfavorites a specific post
*
* Events:
* favorites-updated-single: A user's favorite has been updated. Params: favorites, post_id, site_id, status
*/
var Favorites = Favorites || {};

Favorites.ButtonSubmit = function()
{
	var plugin = this;
	var $ = jQuery;

	plugin.activeButton;
	plugin.formatter = new Favorites.Formatter;
	plugin.data = {};

	plugin.bindEvents = function()
	{
		$(document).on('click', Favorites.selectors.button, function(e){
			e.preventDefault();
			plugin.activeButton = $(this);
			plugin.submitFavorite();
		});
	}

	/**
	* Set the Post Data
	*/
	plugin.setData = function()
	{
		plugin.data.post_id = $(plugin.activeButton).attr('data-postid');
		plugin.data.site_id = $(plugin.activeButton).attr('data-siteid');
		plugin.data.favorite_count = parseInt($(plugin.activeButton).attr('data-favoritecount'));
		plugin.status = ( $(plugin.activeButton).hasClass('active') ) ? 'inactive' : 'active';
	}

	/**
	* Submit the button
	*/
	plugin.submitFavorite = function()
	{
		plugin.loading(true);
		plugin.setData();

		$.ajax({
			url: Favorites.jsData.ajaxurl,
			type: 'post',
			datatype: 'json',
			data: {
				action : Favorites.formActions.favorite,
				nonce : Favorites.jsData.nonce,
				postid : plugin.data.post_id,
				siteid : plugin.data.site_id,
				status : plugin.data.status
			},
			success: function(data){
				Favorites.userFavorites = data.favorites;
				$(plugin.activeButton).html(plugin.outputHtml());
				plugin.loading(false);
				$(document).trigger('favorites-updated-single', [data.favorites, plugin.data.post_id, plugin.data.site_id, plugin.data.status]);

				// Deprecated callback
				favorites_after_button_submit(data.favorites, plugin.data.post_id, plugin.data.site_id, plugin.data.status);
			}
		});
	}

	/*
	* Set the output html
	*/
	plugin.outputHtml = function()
	{
		if ( plugin.status === 'inactive' ) {
			$(plugin.activeButton).removeClass(Favorites.cssClasses.active);
			if ( plugin.data.favorite_count - 1 < 0 ) plugin.data.favorite_count = 1;
			$(plugin.activeButton).attr('data-favoritecount', plugin.data.favorite_count - 1);
			return plugin.formatter.addFavoriteCount(Favorites.jsData.favorite, plugin.data.favorite_count - 1);
		} 
		$(plugin.activeButton).addClass(Favorites.cssClasses.active);
		$(plugin.activeButton).attr('data-favoritecount', plugin.data.favorite_count + 1);
		return plugin.formatter.addFavoriteCount(Favorites.jsData.favorited, plugin.data.favorite_count + 1);
	}

	/*
	* Toggle loading on the button
	*/
	plugin.loading = function(loading)
	{
		if ( loading ){
			$(plugin.activeButton).attr('disabled', 'disabled');
			$(plugin.activeButton).addClass(Favorites.cssClasses.loading);
			$(plugin.activeButton).html(plugin.addLoadingIndication());
			return;
		}
		$(plugin.activeButton).attr('disabled', false);
		$(plugin.activeButton).removeClass(Favorites.cssClasses.loading);
	}

	/*
	* Add loading indication to button
	*/
	plugin.addLoadingIndication = function(html)
	{
		if ( Favorites.jsData.indicate_loading !== '1' ) return html;
		if ( plugin.data.status === 'active' ) return Favorites.jsData.loading_text + Favorites.jsData.loading_image_active;
		return Favorites.jsData.loading_text + Favorites.jsData.loading_image;
	}

	return plugin.bindEvents();
}
/**
* Primary Favorites Initialization
* @package Favorites
* @author Kyle Phillips - https://github.com/kylephillips/favorites
*
* Events:
* favorites-nonce-generated: The nonce has been generated
* favorites-updated-single: A user's favorite has been updated. Params: favorites, post_id, site_id, status
* favorites-cleared: The user's favorites have been cleared. Params: clear button
*/

/**
* Callback Functions for use in themes (deprecated in v2 in favor of events)
*/
function favorites_after_button_submit(favorites, post_id, site_id, status){}
function favorites_after_initial_load(favorites){}

jQuery(document).ready(function(){
	new Favorites.Factory;
});

var Favorites = Favorites || {};

/**
* DOM Selectors Used by the Plugin
*/
Favorites.selectors = {
	button : '.simplefavorite-button', // Favorite Buttons
	list : '.favorites-list', // Favorite Lists
	clear_button : '.simplefavorites-clear', // Clear Button
	total_favorites : '.simplefavorites-user-count', // Total Favorites (from the_user_favorites_count)
}

/**
* CSS Classes Used by the Plugin
*/
Favorites.cssClasses = {
	loading : 'loading', // Loading State
	active : 'active', // Active State
}

/**
* Localized JS Data Used by the Plugin
*/
Favorites.jsData = {
	ajaxurl : simple_favorites.ajaxurl, // The WP AJAX URL
	nonce : null, // The Dynamically-Generated Nonce
	favorite : simple_favorites.favorite, // Active Button Text/HTML
	favorited : simple_favorites.favorited, // Inactive Button Text
	include_count : simple_favorites.includecount, // Whether to include the count in buttons
	indicate_loading : simple_favorites.indicate_loading, // Whether to include loading indication in buttons
	loading_text : simple_favorites.loading_text, // Loading indication text
	loading_image_active : simple_favorites.loading_image_active, // Loading spinner url in active button
	loading_image : simple_favorites.loading_image // Loading spinner url in inactive button
}

/**
* The user's favorites
* @var object
*/
Favorites.userFavorites = null;

/**
* WP Form Actions Used by the Plugin
*/
Favorites.formActions = {
	nonce : 'simplefavorites_nonce',
	favoritesarray : 'simplefavorites_array',
	favorite : 'simplefavorites_favorite',
	clearall : 'simplefavorites_clear',
	favoritelist : 'simplefavorites_list'
}

/**
* Primary factory class
*/
Favorites.Factory = function()
{
	var plugin = this;
	var $ = jQuery;

	plugin.build = function()
	{
		new Favorites.NonceGenerator;
		new Favorites.FrontEnd;
		new Favorites.Lists;
		new Favorites.Clear;
		new Favorites.ButtonSubmit;
	}

	return plugin.build();
}